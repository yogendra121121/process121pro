									Assignment 25

1. Define a class Complex to represent a complex number. Declare instance member variables to store real and imaginary part of a complex number, also define instance member functions to set values of complex number and print values of complex number

#include<iostream>
using namespace std;
class complex
{
private:  
     float real;                         //instance memeber variable
     float imagenary;
public:
     void set(float r, float i)      // r and i is local variable and set() is
     {                               // instance member function
          real = r;
	  imagenary = i; 
     }
     void printComplex()
     {
          cout<<real<<" + "<<imagenary<<"i"<<endl;
     }
     
};


int main()
{
     complex c,c1;
     c.set(4,6);
     c1.set(5.6,8.6);
     c.printComplex();
     c1.printComplex();
     
}




2. Define a class Time to represent Time (like 3 hr 45 min 20 sec). Declare appropriate number of instance member variables 
and also define instance member functions to set values for time and display values of time.

#include<iostream>
using namespace std;
class Time
{
private:
     int hour;
     int min;
     int sec;
public:
     void set(int h, int m, int s)
     {
          hour = h;
	  min = m;
	  sec = s;
     }
     void printTime()
     {
          cout<<hour<<" hr "<<min<<" min "<<sec<<" sec ";
     }
};


int main()
{
     Time t;
     t.set(4,56,17);
     t.printTime();
}





3. Define a class Factorial and define an instance member function to find the Factorial of a number using class

#include<iostream>
using namespace std;
class Factorial
{
private:
     int n;
     int fact;
public:
     void setN(int x)
     {
          n = x;
     }
     int getN()
     {
          return n;
     }
     int getfactorial()
     {
          return fact;
     }
     void factorial()
     {
	  
          int f = 1, i;
	  if(n <= 0)
	  {
	       fact = 1;
	       return;
          }./
          for (i = 1; i <= n; i++)
          {
               f = f*i;
          }
          fact = f;
     }
};

int main()
{
     Factorial f1;
     f1.setN(7);
     f1.factorial();
     cout<<"factorial of "<<f1.getN()<<" is "<<f1.getfactorial();

     return 0;
}




4. Define a class LargestNumber and define an instance member function to find the Largest of three Numbers using the class.

#include<iostream>
using namespace std;
class LargestNumber
{

private:
     int a,b,c,larger;
public:
     void setVar(int x, int y, int z)
     {
          a = x, b = y, c = z;
     }
     int get_a()
     {
          return a;
     }
     int get_b()
     {
          return b;
     }
     int get_c()
     {
          return c;
     }
     int getLargerNumber()
     {
          return larger;
     }
     void Greater_among_three()
     {
          int max;
          max = a>b?a>c?a:c:b>c?b:c;
          larger = max;
     }
};

int main()
{
     LargestNumber l;
     l.setVar(23,56,4);
     l.Greater_among_three();
     cout<<"greater among "<<l.get_a()<<", "<<l.get_b()<<" and "<<l.get_c()<<" is = "<<l.getLargerNumber();
     return 0;
}




5. Define a class ReverseNumber and define an instance member function to find
Reverse of a Number using class.

#include<iostream>
using namespace std;
class ReverseNumber
{

private:
     int n, reverseNumber;
     int actualNumber;
public:
     void setN(int x)
     {
          n = x;
          actualNumber = n;
     }
     int getN()
     {
          return actualNumber;
     }
     int getReverseNumber()
     {
          return reverseNumber;
     }
     void calculateReverseNumber()
     {    

          int re = 0;
          while (n > 0)
          {
               int remain = n%10;
               re = re*10 + remain;
               n = n/10;
          }
          reverseNumber = re;
     }
};

int main()
{
     ReverseNumber ob;
     ob.setN(23456);
     ob.calculateReverseNumber();
     cout<<ob.getN()<<" of reverse number is = "<<ob.getReverseNumber(); 

     return 0;
}




6. Define a class Square to find the square of a number and write a C++ program to Count number of times a function is called.

#include <iostream>
using namespace std;
class Square
{

private:
     int x, x2;
     static int count;
public:
     void setx(int n)
     {
          x = n;
     }
     int getx()
     {
          return x;
     }
     int getSquare()
     {
          return x2;
     }
     int getCount()
     {
          return count;
     }
     void CalculateSquare()
     {
          x2 =  x*x;
          count++;
     }
};
int Square :: count;

int main()
{
     Square s,s1,s2,s3;
     s.setx(5);
     s1.setx(3);
     s2.setx(4);
     s3.setx(7);
     s.CalculateSquare();
     s1.CalculateSquare();
     s2.CalculateSquare();
     s3.CalculateSquare();
     cout<<"Square of "<<s.getx()<<" is = "<<s.getSquare()<<endl;
     cout<<"Square of "<<s1.getx()<<" is = "<<s1.getSquare()<<endl;
     cout<<"Square of "<<s2.getx()<<" is = "<<s2.getSquare()<<endl;
     cout<<"Square of "<<s3.getx()<<" is = "<<s3.getSquare()<<endl;
     cout<<"Function call is "<<s.getCount()<<" time called"<<endl;
     return 0;
}





7. Define a class  and define instance member function to find Largest among 3 numbers using classes.

#include<iostream>
using namespace std;
class LargestNumber
{

private:
     int a,b,c,larger;
public:
     void setVar(int x, int y, int z)
     {
          a = x, b = y, c = z;
     }
     int get_a()
     {
          return a;
     }
     int get_b()
     {
          return b;
     }
     int get_c()
     {
          return c;
     }
     int getLargerNumber()
     {
          return larger;
     }
     void Greater_among_three()
     {
          int max;
          max = a>b?a>c?a:c:b>c?b:c;
          larger = max;
     }
};

int main()
{
     LargestNumber l;
     l.setVar(23,56,4);
     l.Greater_among_three();
     cout<<"greater among "<<l.get_a()<<", "<<l.get_b()<<" and "<<l.get_c()<<" is = "<<l.getLargerNumber();
     return 0;
}





8. Define a class Rectangle and define an instance member function to find the area of the rectangle

#include<iostream>
using namespace std;
class Rectangle
{

private:
     int width, length, area;
public:
     void setValues(int w, int l)
     {
          width = w, length = l;
     }
     int getArea()
     {
          return area;
     }
     void area_of_rectangle()
     {    
          int a = width * length;
          area = a;
     }
};

int main()
{
     Rectangle ob;
     ob.setValues(5,6);
     ob.area_of_rectangle();
     cout<<"Area of rectangle is = "<<ob.getArea();
     return 0;
}




9. Define a class Circle and define an instance member function to find the area of the circle.

#include<iostream>
using namespace std;
class Circle
{

private:
     float r, area;
public:
     void setValues(float x)
     {
          r = x;
     }
     float getArea()
     {
          return area;
     }
     void area_of_rectangle()
     {    
          float a = 3.14 * r * r;
          area = a;
     }
};

int main()
{
     Circle ob;
     ob.setValues(3);
     ob.area_of_rectangle();
     cout<<"Area of circle is = "<<ob.getArea();
     return 0;
}





10. Define a class Area and define instance member functions to find the area of the
different shapes like square, rectangle , circle etc.

#include <iostream>
using namespace std;
class Area
{
private:
     float side, length, width, redius;

public:
     void setSide(int a)
     {
          side = a;
     }
     void setRedius(int r)
     {
          redius = r;
     }
     void setLengthWidth(int l, int w)
     {
          length = l;
          width = w;
     }
     float area_of_square()
     {
          return side * side;
     }
     float area_of_rectangle()
     {
          return length*width;
     }
     float area_of_circle()
     {
          return 3.14*redius*redius;
     }
};

int main()
{
     Area a;
     a.setRedius(3);
     a.setLengthWidth(5,7);
     a.setSide(7);

     cout<<"Area of circle is: "<<a.area_of_circle()<<endl;
     cout<<"Area of square is: "<<a.area_of_square()<<endl;
     cout<<"Area of rectangle is: "<<a.area_of_rectangle()<<endl;
     return 0;
}