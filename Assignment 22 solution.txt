									Assignment 22


1. Define a function to input variable length string and store it in an array without memory wastage.

#include<stdio.h>
#include<stdlib.h>
int main()
{
     char *str, c;
     int i = 0, j = 1;

     str = (char*)malloc(sizeof(char));

     printf("Enter string: ");

     while (c != '\n')
     {
          c = getc(stdin);
          j++;
          str = (char*)realloc(str, j * sizeof(char));
          str[i] = c;
          i++;
     }
     str[i] = '\0';
     printf("\nThe entered string is : %s", str);
     free(str);
     return 0;
}




2. Write a program to ask the user to input a number of data values he would like to
enter then create an array dynamically to accommodate the data values. Now take
the input from the user and display the average of data values.

#include<stdio.h>
#include<stdlib.h>
int main()
{
     int *ptr, c;
     int i = 0, size = 0, sum = 0;
     printf("Enter Size of array ");
     scanf("%d",&size);

     ptr = (int*)calloc(size, sizeof(int));
     if(ptr == NULL)
     {
          printf("Memory Allocation Failed \n");
          return 0;
     }
     printf("\nThe entered %d values \n",size);
     for (i = 0; i < size; i++)
     {
          scanf("%d",ptr+i);
     }
     for (i = 0; i < size; i++)
     {
          sum  = sum + *(ptr+i);
     }
     printf("Average is %d \n",sum/size);
     free(ptr);
     
}




3. Write a program to calculate the sum of n numbers entered by the user using malloc and free.

#include <stdio.h>
#include <stdlib.h>
int main()
{
     int *ptr;
     int i = 0, size = 0, sum = 0;
     printf("Enter Size of array ");
     scanf("%d", &size);

     ptr = (int *)calloc(size, sizeof(int));
     if (ptr == NULL)
     {
          printf("Memory Allocation Failed \n");
          return 0;
     }
     printf("\nThe entered %d values \n", size);
     for (i = 0; i < size; i++)
     {
          scanf("%d", ptr + i);
     }
     for (i = 0; i < size; i++)
     {
          sum = sum + *(ptr + i);
     }
     printf("Sum is: %d ", sum);
     free(ptr);
}




4. Write a program to input and print text using dynamic memory allocation.

#include<stdio.h>
#include<stdlib.h>
int main()
{
     char *str, c;
     int i = 0, j = 1;

     str = (char*)calloc(1,sizeof(char));

     printf("Enter string: ");

     while (c != '\n')
     {
          c = getc(stdin);
          j++;
          str = (char*)realloc(str, j * sizeof(char));
          str[i] = c;
          i++;
     }
     str[i] = '\0';
     printf("\nThe entered string is : %s", str);
     free(str);
     return 0;
}




5. Write a program to read a one dimensional array, print sum of all elements along with
inputted array elements using dynamic memory allocation.

#include<stdio.h>
#include<stdlib.h>
int main()
{
     int *ptr,size;
     int a[100], i, sum = 0;
     printf("Enter size of array ");
     scanf("%d",&size);
     ptr = (int* )malloc(size*sizeof(int));
     printf("\nThe entered %d values in our array \n", size);
     for (i = 0; i < size; i++)
     {
          scanf("%d", ptr + i);
     }
     for (i = 0; i < size; i++)
     {
          sum = sum + *(ptr + i);
     }
     printf("Sum of our all array elements: %d ", sum);
     free(ptr);
}




6. Write a program in C to find the largest element using Dynamic Memory Allocation.

#include <stdio.h>
#include <stdlib.h>
int main()
{
     int *ptr;
     int i = 0, size = 0, max = 0;
     printf("Enter Size of array ");
     scanf("%d", &size);

     ptr = (int *)malloc(size*sizeof(int));
     if (ptr == NULL)
     {
          printf("Memory Allocation Failed \n");
          return 0;
     }
     printf("\nThe entered %d values \n", size);
     for (i = 0; i < size; i++)
     {
          scanf("%d", ptr + i);
     }
     max = *(ptr+0);
     for (i = 1; i < size; i++)
     {
          if (max < *(ptr + i))
          {
               max = *(ptr + i);
          }
     }
     printf("largest element is: %d",max);
     return 0;
}




7. Write a program to demonstrate memory leak in C.

#include <stdio.h>
#include <stdlib.h>
int main()
{
     int *ptr, c;
     ptr = (int *)malloc(sizeof(int));
     ptr = NULL;
}



8. Write a program to demonstrate dangling pointers in C.

#include<stdio.h>
#include<stdlib.h>
int main()
{
     int *ptr;
     ptr = (int* )malloc(sizeof(int));
     *ptr = 5;
     printf("%d\n",*ptr);
     free(ptr);
     printf("%d\n",*ptr);  //here ptr is dangling pointer
}




9. Write a program to allocate memory dynamically of the size in bytes entered by the
user. Also handle the case when memory allocation is failed.

#include<stdio.h>
#include<stdlib.h>
int main()
{
     char *ptr, size;
     printf("Enter the size in bytes ");
     scanf("%d",&size);
     ptr = (char*)calloc(size, sizeof(char));

     if(ptr == NULL)               //handle the case when memory allocation is failed.
     {
          printf("Memory Allocation Failed \n");
          return 0;
     }
     free(ptr);
}




10. Find out the maximum and minimum from an array using dynamic memory allocation in C.

#include<stdio.h>
#include<stdlib.h>
int main()
{
     int *ptr,size;
     int a[100], i, sum = 0, max, min;
     printf("Enter size of array ");
     scanf("%d",&size);
     ptr = (int* )malloc(size*sizeof(int));
     printf("\nThe entered %d values in our array \n", size);
     for (i = 0; i < size; i++)
     {
          scanf("%d", ptr + i);
     }
     for (i = 0; i < size; i++)
     {
          
     }
     max = *(ptr+0);
     for (i = 1; i < size; i++)
     {
          if (max < *(ptr + i))
          {
               max = *(ptr + i);
          }
     }
     min = *(ptr+0);
     for (i = 1; i < size; i++)
     {
          if (min > *(ptr + i))
          {
               min = *(ptr + i);
          }
     }
     printf("Maximun value of our array: %d\n",max); 
     printf("Minimun value of our array: %d",min); 
     free(ptr);
}







