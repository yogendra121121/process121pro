                                                                 Assignment 15


1. Write a function to find the greatest number from the given array of any size. (TSRS)

#include<stdio.h>
int Greatest_num(int b[],int n)
{
    int max = b[0],i;
    for (i = 0; i < n; i++)
    {
         if (max <= b[i])
         {
              max = b[i];
         }
    }
    return max;
     
}
int main()
{
    int a[10], i, s;
    printf("Enter an array elements ");
    for (i = 0; i < 10; i++)
    {
         scanf("%d",&a[i]);
    }
    s = Greatest_num(a,10);
    printf("greatest number is %d",s);
    return 0;
     
}



2. Write a function to find the smallest number from the given array of any size. (TSRS)

#include<stdio.h>
int Smallest_num(int b[], int n)
{
     int min = b[0],i;
     for (i = 0; i < n; i++)
     {
          if (min >= b[i])
          {
               min = b[i];
          }
     }
     return min;
}
int main()
{
     int a[10], i, s;
     printf("Enter an array elements: ");
     for (i = 0; i < 10; i++)
     {
          scanf("%d", &a[i]);
     }
     s = Smallest_num(a,10);
     printf("Smallest number is %d",s);
     return 0;
}



3. Write a function to sort an array of any size. (TSRN)

#include<stdio.h>
void SortArray(int b[],int n)
{
     int i,j,temp;
     for (i = 0; i < n; i++)
     {
          for (j = i+1; j < n; j++)
          {
               if(b[i]>b[j])
               {
                    temp = b[i];
                    b[i] = b[j];
                    b[j] = temp;
               }
          }
          
     }
     printf("\nafter sort our array is: ");
     for (i = 0; i < n; i++)
     {
          printf("%d ",b[i]);
     }
     
}
int main()
{
     int a[5],i;
     printf("Enter an array elements:- ");
     for (i = 0; i < 5; i++)
     {
          scanf("%d",&a[i]);
     }
     printf("\nbefore sort our array is: ");
     for (i = 0; i < 5; i++)
     {
          printf("%d ",a[i]);
     }
     SortArray(a,5);
}



4. Write a function to rotate an array by n position in d direction. The d is an indicative 
value for left or right. (For example, if array of size 5 is [32, 29, 40, 12, 70]; n is 2 and 
d is left, then the resulting array after left rotation 2 times is [40, 12, 70, 32, 29] )

#include<stdio.h>
void Rotate(int b[],int size)
{
     int i,j,n,d,temp;
     printf("\n1 for right rotate");
     printf("\n2 for left rotate");
     printf("\nEnter indicative value for left or right direction ");
     scanf("%d",&d);

     switch (d)
     {
     case 1:  printf("\nEnter positions for right rotate ");
              scanf("%d",&n);
              for (j = 0; j < n; j++)
              {
                    temp = b[size-1];
                    for (i = size - 1; i >= 0; i--)
                    {
                         b[i] = b[i-1];
                    }
                    b[0] = temp;
              }
          break;

     case 2:  printf("\nEnter positions for left rotate");
              scanf("%d",&n);
              for (j = 0; j < n; j++)
              {
                    temp = b[0];
                    for (i = 0; i < size; i++)
                    {
                         b[i] = b[i+1];
                    }
                    b[size-1] = temp;
              }
          break;
     
     default: printf("Invalid indicative value");
          break;
     }
     printf("\nafter rotate our array is: ");
     for (i = 0; i < size; i++)
     {
          printf("%d ",b[i]);
     }

}
int main()
{
     int a[5],i;
     printf("Enter an array elements:- ");
     for (i = 0; i < 5; i++)
     {
          scanf("%d",&a[i]);
     }
     printf("\nbefore rotate our array is: ");
     for (i = 0; i < 5; i++)
     {
          printf("%d ",a[i]);
     }
     Rotate(a,5);
}



5. Write a function to find the first occurrence of adjacent duplicate values in the array. 
Function has to return the value of the element.

#include<stdio.h>
int first_occur_duplicate(int b[], int size)
{
     int i,j,t = b[0];
     for ( i = 0; i < size; i++)
     {
          if(b[i]==b[i+1])
               return b[i];
     }
     return 0;
}

int main()
{
     int x[10], i, s;
     printf("enter array elements ");
     for (i = 0; i < 10; i++)
     {
          scanf("%d",&x[i]);
     }
     printf("Our array elements is: ");
     for (i = 0; i < 10; i++)
     {
          printf("%d  ",x[i]);
     }
     s = first_occur_duplicate(x,10);
     printf("\nfirst occurrence of adjacent duplicate value %d",s);
     return 0;
}




6. Write a function in C to read n number of values in an array and display it in reverse order.

#include<stdio.h>
void reverse_order(int b[], int size)
{
     int i;
     printf("Our array in reverse order is: ");
     for (i = size-1; i >= 0; i--)
     {
          printf("%d ",b[i]);
     }
     
}
int main()
{
     int a[100], i,n;
     printf("enter a number of array elements ");
     scanf("%d",&n);
     printf("Enter array elements: ");
     for (i = 0; i < n; i++)
     {
          scanf("%d",&a[i]);
     }
     reverse_order(a,n);
     return 0;
}



7. Write a function in C to count a total number of duplicate elements in an array.

#include<stdio.h>
void duplicate_count(int b[], int n)
{
     int count = 0,i,j;
     for (i = 0; i < n-1; i++)
     {
          for (j = i+1; j < n; j++)
          {
               if (b[i]==b[j])
                    count++;
          }
     }
     printf("total number of duplicate elements %d",count);
}
int main()
{
     int a[10], i;
     printf("Enter array elements: ");
     for (i = 0; i < 10; i++)
     {
          scanf("%d",&a[i]);
     }
     duplicate_count(a, 10);
     return 0;
}





8. Write a function in C to print all unique elements in an array.

#include<stdio.h>
void unique_element(int b[], int n)
{
     int count = 0,i,j;
     for (i = 0; i < n-1; i++)
     {    count = 0;
          for (j = i+1; j < n; j++)
          {
               if (b[i]==b[j])
                    count++;
               
          }
          if (count == 0)
               printf("%d  ",b[i]);
     }
     
}
int main()
{
     int a[10], i;
     printf("Enter array elements: ");
     for (i = 0; i < 10; i++)
     {
          scanf("%d",&a[i]);
     }
     unique_element(a, 10);
     return 0;
}




9. Write a function in C to merge two arrays of the same size sorted in descending order.

#include<stdio.h>
void  merged_array()
{
     int a[5],b[5],c[10];
     int k = 0,i=0,j=0;
     printf("enter first array elements: ");
     for (i = 0; i < 5; i++)
     {
          scanf("%d",&a[i]);
     }
     printf("enter second array elements: ");
     for (i = 0; i < 5; i++)
     {
          scanf("%d",&b[i]);
     } 

     for(k=0; k<10; k++)
     {
          if(i>5)
          {
               while (k<10)
               {
                    c[k] = b[j];
                    j++;
                    k++;
                    if (k==10)
                         break;
               }
          }
          if(j>5)
          {
               while (k<10)
               {
                    c[k] = a[i];
                    i++;
                    k++;
                    if (k==10)
                         break;
               }
          }
          else if (a[i]<b[j])
          {
               c[k] = a[i];
               i++;
          }
          else
               c[k] = b[j];
               j++;
     }   
     for (k = 0; k < 10; k++)
     {
          printf("%d ",c[k]);
     }
     
}
int main()
{
     merged_array();
     return 0;
}



10. Write a function in C to count the frequency of each element of an array.

#include<stdio.h>
void frequency_count(int b[],int n)
{
     int freq[100] = {0},i;
     for (i = 0; i < n; i++)
     {
          freq[b[i]]++;
     }
     printf("frequency of our array elements is:- ");
     for (i = 0; i < 100; i++)
     {
          if (freq[i]!=0)
               printf("\n%d ===> %d",i,freq[i]);
          
     }
     
     
}
int main()
{
     int a[10],i;
     printf("Enter elements of array: ");
     for (i = 0; i < 10; i++)
     {
          scanf("%d", &a[i]);
     }
     frequency_count(a,10);
     return 0;
}